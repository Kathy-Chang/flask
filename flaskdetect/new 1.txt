# USAGE
# python build_face_dataset.py --cascade haarcascade_frontalface_default.xml 
#                              --output dataset/yourname

# import the necessary packages
from imutils.video import VideoStream
import argparse
import imutils
import time
import cv2
import os
import numpy as np
import pickle
import webbrowser
import paho.mqtt.client as mqtt
import sys
import threading 

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-c", "--cascade", required=False,default='haarcascade_frontalface_default.xml',
    help = "path to where the face cascade resides")
ap.add_argument("-d", "--detector", required=False,default='face_detection_model',
    help="path to OpenCV's deep learning face detector")
ap.add_argument("-m", "--embedding-model", required=False,default='openface_nn4.small2.v1.t7',
    help="path to OpenCV's deep learning face embedding model")
ap.add_argument("-r", "--recognizer", required=False,default='output/recognizer.pickle',
    help="path to model trained to recognize faces")
ap.add_argument("-l", "--le", required=False,default='output/le.pickle',
    help="path to label encoder")
ap.add_argument("-cc", "--confidence", type=float, default=0.5,
    help="minimum probability to filter weak detections")
args = vars(ap.parse_args())
args = vars(ap.parse_args())
# def cvshow():
    threading.Event.wait()
    # time.sleep(1)
# load OpenCV's Haar cascade for face detection from disk
detector = cv2.CascadeClassifier(args["cascade"])

# initialize the video stream, allow the camera sensor to warm up,
# and initialize the total number of example faces written to disk
# thus far
print("[INFO] starting video stream...")
# vs = VideoStream(src=0).start()
vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)
frame = vs.read()
orig = frame.copy()
frame = imutils.resize(frame, width=400)

# detect faces in the grayscale frame
rects = detector.detectMultiScale(
cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), scaleFactor=1.1, 
minNeighbors=5, minSize=(30, 30))

while True:
    # grab the frame from the threaded video stream, clone it, (just
    # in case we want to write it to disk), and then resize the frame
    # so we can apply face detection faster
    frame = vs.read()
    orig = frame.copy()
    frame = imutils.resize(frame, width=400)

    # detect faces in the grayscale frame
    rects = detector.detectMultiScale(
        cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), scaleFactor=1.1, 
        minNeighbors=5, minSize=(30, 30))

    # loop over the face detections and draw them on the frame
    for (x, y, w, h) in rects:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # show the output frame
    cv2.imshow("Frame", frame)
    
 
    # 1.用秒數控制拍照
    for i in range(5):
        cv2.imshow("Frame", frame)
        if i <4:
            time.sleep(1)
            
        elif i==4:
            cv2.imshow("Frame", frame)
            image=orig
            cv2.destroyAllWindows()
            vs.stop()
            break
    
    # 2.if the `k` key was pressed, write the *original* frame to disk
    # so we can later process it and use it for face recognition
    # key = cv2.waitKey(1) & 0xFF
    # if key == ord("k"):
        # image=orig
        # cv2.destroyAllWindows()
        # vs.stop()
        # break
    if the `q` key was pressed, break from the loop
    # elif key == ord("q"):
        # cv2.destroyAllWindows()
        # sys.exit(0)
        
    # while True:
        # cv2.imshow("Frame", frame)
        # key=cv2.waitKey(1) & 0xFF
        # image=orig
        # event = threading.Event()
        # for i in range(5):
            # t1 = threading.Thread(target=cvshow)
            # t1.start()
            # t1.join()
        # if key == '':
        
            # cv2.destroyAllWindows()
            # vs.stop()
            # break
        # else:
            # cv2.destroyAllWindows()
            # vs.stop()
            # break
    #break
        

# load our serialized face detector from disk
print("[INFO] loading face detector...")
protoPath = os.path.sep.join([args["detector"], "deploy.prototxt"])
modelPath = os.path.sep.join([args["detector"],
    "res10_300x300_ssd_iter_140000.caffemodel"])
detector = cv2.dnn.readNetFromCaffe(protoPath, modelPath)

# load our serialized face embedding model from disk
print("[INFO] loading face recognizer...")
embedder = cv2.dnn.readNetFromTorch(args["embedding_model"])

# load the actual face recognition model along with the label encoder
recognizer = pickle.loads(open(args["recognizer"], "rb").read())
le = pickle.loads(open(args["le"], "rb").read())

# load the image, resize it to have a width of 600 pixels (while
# maintaining the aspect ratio), and then grab the image dimensions
#image = cv2.imread(image)
image = imutils.resize(image, width=600)
(h, w) = image.shape[:2]

# construct a blob from the image
imageBlob = cv2.dnn.blobFromImage(
    cv2.resize(image, (300, 300)), 1.0, (300, 300),
    (104.0, 177.0, 123.0), swapRB=False, crop=False)

# apply OpenCV's deep learning-based face detector to localize
# faces in the input image
detector.setInput(imageBlob)
detections = detector.forward()

# loop over the detections
for i in range(0, detections.shape[2]):
    # extract the confidence (i.e., probability) associated with the
    # prediction
    confidence = detections[0, 0, i, 2]

    # filter out weak detections
    if confidence > args["confidence"]:
        # compute the (x, y)-coordinates of the bounding box for the
        # face
        box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
        (startX, startY, endX, endY) = box.astype("int")

        # extract the face ROI
        face = image[startY:endY, startX:endX]
        (fH, fW) = face.shape[:2]

        # ensure the face width and height are sufficiently large
        if fW < 20 or fH < 20:
            continue

        # construct a blob for the face ROI, then pass the blob
        # through our face embedding model to obtain the 128-d
        # quantification of the face
        faceBlob = cv2.dnn.blobFromImage(face, 1.0 / 255, (96, 96),
            (0, 0, 0), swapRB=True, crop=False)
        embedder.setInput(faceBlob)
        vec = embedder.forward()

        # perform classification to recognize the face
        preds = recognizer.predict_proba(vec)[0]
        j = np.argmax(preds)
        proba = preds[j]
        name = le.classes_[j]

        # draw the bounding box of the face along with the associated
        # probability
        #text = "{:.2f}".format(proba * 100)
        text = int(proba * 100)
        if text>=70:
            print("open")
            
            os.system('python3 test_publish.py')
            sys.exit(0)
        else:
            print("alarm")
            sys.exit(0)
        # Part of drwaing the bounding box
        # y = startY - 10 if startY - 10 > 10 else startY + 10
        # cv2.rectangle(image, (startX, startY), (endX, endY),
            #(0, 0, 255), 2)
        # cv2.putText(image, text, (startX, y),
            #cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)

# show the output image
# cv2.imshow("Image", image)
# cv2.waitKey(0)